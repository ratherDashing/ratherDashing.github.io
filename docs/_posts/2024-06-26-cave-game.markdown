---
layout: post
title:  "Cave Game"
date:   2024-06-26 17:00:00 -0400
categories: Games
---
## Cave Game

<div id="game-container" style="position: relative; width: 100%; height: 400px;">
    <canvas id="gameCanvas" style="width: 100%; height: 100%;"></canvas>
    <div id="score" style="position: absolute; top: 10px; left: 10px; font-size: 24px; color: white; text-shadow: 2px 2px 4px #000000;">Cave Coins: 0</div>
    <div id="inventory" style="position: absolute; top: 40px; left: 10px; font-size: 18px; color: white; text-shadow: 2px 2px 4px #000000;">Inventory: Empty</div>
    <div id="controls" style="position: absolute; bottom: 10px; left: 0; right: 0; display: flex; justify-content: space-between; padding: 10px;">
        <button id="leftBtn" class="control-btn" style="width: 60px; height: 60px; background-color: rgba(255, 255, 255, 0.5); border: none; border-radius: 50%; font-size: 24px;">←</button>
        <button id="jumpBtn" class="control-btn" style="width: 60px; height: 60px; background-color: rgba(255, 255, 255, 0.5); border: none; border-radius: 50%; font-size: 24px;">↑</button>
        <button id="rightBtn" class="control-btn" style="width: 60px; height: 60px; background-color: rgba(255, 255, 255, 0.5); border: none; border-radius: 50%; font-size: 24px;">→</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const inventoryElement = document.getElementById('inventory');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let score = 0;
        let cameraX = 0;
        let inventory = null;

        const cavePerson = {
            x: 150,
            y: canvas.height - 100,
            width: 50,
            height: 100,
            speed: 5,
            jumping: false,
            jumpStrength: 15,
            jumpVelocity: 0
        };

        const homeCave = {
            x: 50,
            y: canvas.height - 200,
            width: 150,
            height: 200
        };

        const foods = [];
        const palmTrees = [];
        const berryBushes = [];
        let coconuts = [];
        let berries = [];

        function generateWorld(startX, endX) {
            for (let x = startX; x < endX; x += 300) {
                if (Math.random() < 0.3) {
                    palmTrees.push({ x: x, y: canvas.height - 250, width: 80, height: 250 });
                }
                if (Math.random() < 0.2) {
                    berryBushes.push({ x: x + 150, y: canvas.height - 120, width: 100, height: 100 });
                }
                if (Math.random() < 0.1) {
                    foods.push({ type: 'steak', x: x + 200, y: canvas.height - 50, width: 60, height: 40, value: 5 });
                }
            }
        }

        generateWorld(homeCave.x + homeCave.width, canvas.width * 2);

        function drawCavePerson() {
            ctx.save();
            ctx.translate(cavePerson.x - cameraX, cavePerson.y);

            // Body
            ctx.fillStyle = '#8B4513';
            ctx.fillRect(0, 20, cavePerson.width, cavePerson.height - 20);

            // Head
            ctx.fillStyle = '#DEB887';
            ctx.beginPath();
            ctx.arc(cavePerson.width / 2, 20, 20, 0, Math.PI * 2);
            ctx.fill();

            // Eyes
            ctx.fillStyle = 'white';
            ctx.beginPath();
            ctx.arc(cavePerson.width / 2 - 7, 15, 5, 0, Math.PI * 2);
            ctx.arc(cavePerson.width / 2 + 7, 15, 5, 0, Math.PI * 2);
            ctx.fill();
            ctx.fillStyle = 'black';
            ctx.beginPath();
            ctx.arc(cavePerson.width / 2 - 7, 15, 2, 0, Math.PI * 2);
            ctx.arc(cavePerson.width / 2 + 7, 15, 2, 0, Math.PI * 2);
            ctx.fill();

            // Mouth
            ctx.beginPath();
            ctx.arc(cavePerson.width / 2, 28, 8, 0, Math.PI);
            ctx.stroke();

            // Clothes
            ctx.fillStyle = '#A52A2A';
            ctx.fillRect(0, 60, cavePerson.width, 40);

            // Draw held item
            if (inventory) {
                ctx.fillStyle = inventory === 'steak' ? '#8B0000' : inventory === 'coconut' ? '#8B4513' : '#8E4585';
                ctx.beginPath();
                ctx.arc(cavePerson.width + 10, cavePerson.height / 2, 10, 0, Math.PI * 2);
                ctx.fill();
            }

            ctx.restore();
        }

        function drawFoods() {
            foods.forEach(food => {
                if (food && food.type === 'steak') {
                    ctx.save();
                    ctx.translate(food.x - cameraX, food.y);

                    // Steak body
                    ctx.fillStyle = '#8B0000';
                    ctx.beginPath();
                    ctx.moveTo(0, 10);
                    ctx.bezierCurveTo(0, 0, food.width, 0, food.width, 10);
                    ctx.bezierCurveTo(food.width, food.height, 0, food.height, 0, 10);
                    ctx.fill();

                    // Fat marbling
                    ctx.strokeStyle = '#FFA07A';
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.moveTo(10, 15);
                    ctx.bezierCurveTo(20, 10, 30, 20, 40, 15);
                    ctx.stroke();

                    // Grill marks
                    ctx.strokeStyle = '#4B0000';
                    ctx.lineWidth = 3;
                    ctx.beginPath();
                    ctx.moveTo(5, 5);
                    ctx.lineTo(food.width - 5, 5);
                    ctx.moveTo(5, food.height - 10);
                    ctx.lineTo(food.width - 5, food.height - 10);
                    ctx.stroke();

                    ctx.restore();
                }
            });
        }

        function drawPalmTrees() {
            palmTrees.forEach(tree => {
                if (tree) {
                    ctx.save();
                    ctx.translate(tree.x - cameraX, tree.y);
                    // Trunk
                    ctx.fillStyle = '#8B4513';
                    ctx.fillRect(tree.width / 2 - 10, 0, 20, tree.height);
                    // Leaves
                    ctx.fillStyle = '#228B22';
                    for (let i = 0; i < 5; i++) {
                        ctx.save();
                        ctx.translate(tree.width / 2, 0);
                        ctx.rotate((i * Math.PI * 2) / 5);
                        ctx.beginPath();
                        ctx.moveTo(0, 0);
                        ctx.lineTo(-30, -100);
                        ctx.lineTo(30, -100);
                        ctx.closePath();
                        ctx.fill();
                        ctx.restore();
                    }
                    ctx.restore();
                }
            });
        }

        function drawBerryBushes() {
            berryBushes.forEach(bush => {
                if (bush) {
                    ctx.save();
                    ctx.translate(bush.x - cameraX, bush.y);
                    // Branches
                    ctx.strokeStyle = '#8B4513';
                    ctx.lineWidth = 5;
                    for (let i = 0; i < 3; i++) {
                        ctx.beginPath();
                        ctx.moveTo(bush.width / 2, bush.height);
                        ctx.quadraticCurveTo(
                            (i - 1) * 30,
                            bush.height / 2,
                            i * 30,
                            0
                        );
                        ctx.stroke();
                    }
                    // Leaves
                    ctx.fillStyle = '#228B22';
                    ctx.beginPath();
                    ctx.arc(bush.width / 2, 0, bush.width / 2, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.restore();
                }
            });
        }

        function drawCoconuts() {
            ctx.fillStyle = '#8B4513';
            coconuts.forEach(coconut => {
                if (coconut) {
                    ctx.beginPath();
                    ctx.arc(coconut.x - cameraX, coconut.y, 15, 0, Math.PI * 2);
                    ctx.fill();
                    // Add some texture
                    ctx.fillStyle = '#6B3E23';
                    ctx.beginPath();
                    ctx.arc(coconut.x - cameraX - 5, coconut.y - 5, 3, 0, Math.PI * 2);
                    ctx.arc(coconut.x - cameraX + 5, coconut.y + 5, 3, 0, Math.PI * 2);
                    ctx.fill();
                }
            });
        }

        function drawBerries() {
            ctx.fillStyle = '#8E4585';
            berries.forEach(berry => {
                if (berry) {
                    ctx.beginPath();
                    ctx.arc(berry.x - cameraX, berry.y, 5, 0, Math.PI * 2);
                    ctx.fill();
                }
            });
        }

        function drawHomeCave() {
            ctx.fillStyle = '#4B3621';
            ctx.beginPath();
            ctx.moveTo(homeCave.x - cameraX, canvas.height);
            ctx.lineTo(homeCave.x - cameraX, homeCave.y);
            ctx.quadraticCurveTo(homeCave.x - cameraX + homeCave.width / 2, homeCave.y - 50, homeCave.x - cameraX + homeCave.width, homeCave.y);
            ctx.lineTo(homeCave.x - cameraX + homeCave.width, canvas.height);
            ctx.fill();
        }

        function update() {
            // Move cave person
            if (keys.ArrowLeft) cavePerson.x -= cavePerson.speed;
            if (keys.ArrowRight) cavePerson.x += cavePerson.speed;

            // Camera follows cave person
            cameraX = cavePerson.x - canvas.width / 3;

            // Handle jumping
            if (keys.ArrowUp && !cavePerson.jumping) {
                cavePerson.jumping = true;
                cavePerson.jumpVelocity = -cavePerson.jumpStrength;
            }

            if (cavePerson.jumping) {
                cavePerson.y += cavePerson.jumpVelocity;
                cavePerson.jumpVelocity += 0.8; // Gravity

                if (cavePerson.y > canvas.height - cavePerson.height) {
                    cavePerson.y = canvas.height - cavePerson.height;
                    cavePerson.jumping = false;
                }
            }

            // Generate more world as we move right
            if (palmTrees.length > 0 && cavePerson.x + canvas.width > palmTrees[palmTrees.length - 1].x) {
                generateWorld(palmTrees[palmTrees.length - 1].x, palmTrees[palmTrees.length - 1].x + canvas.width);
            }

            // Update coconuts
            coconuts.forEach(coconut => {
                if (coconut) {
                    coconut.y += 2;
                    if (coconut.y > canvas.height) {
                        coconut.y = canvas.height - 20;
                    }
                }
            });

            // Randomly drop coconuts
            palmTrees.forEach(tree => {
                if (tree && Math.random() < 0.001) {
                    coconuts.push({ x: tree.x + tree.width / 2, y: tree.y });
                }
            });

            // Randomly drop berries
            berryBushes.forEach(bush => {
                if (bush && Math.random() < 0.005) {
                    berries.push({ x: bush.x + Math.random() * bush.width, y: bush.y });
                }
            });

            // Update berries
            berries = berries.filter(berry => {
                if (berry) {
                    berry.y += 1;
                    return berry.y <= canvas.height;
                }
                return false;
            });

            // Check for food collection
            if (!inventory) {
                foods.concat(coconuts, berries).forEach(food => {
                    if (food &&
                        cavePerson.x < food.x + (food.width || 30) &&
                        cavePerson.x + cavePerson.width > food.x &&
                        cavePerson.y < food.y + (food.height || 30) &&
                        cavePerson.y + cavePerson.height > food.y
                    ) {
                        inventory = food.type || (coconuts.includes(food) ? 'coconut' : 'berry');
                        inventoryElement.textContent = `Inventory: ${inventory}`;
                        if (food.type === 'steak') {
                            foods = foods.filter(f => f !== food);
                        } else {
                            coconuts = coconuts.filter(c => c !== food);
                            berries = berries.filter(b => b !== food);
                        }
                    }
                });
            }

            // Check for home cave delivery
            if (inventory &&
                cavePerson.x < homeCave.x + homeCave.width &&
                cavePerson.x + cavePerson.width > homeCave.x &&
                cavePerson.y < homeCave.y + homeCave.height &&
                cavePerson.y + cavePerson.height > homeCave.y
            ) {
                score += inventory === 'steak' ? 5 : inventory === 'coconut' ? 10 : 1;
                scoreElement.textContent = `Cave Coins: ${score}`;
                inventory = null;
                inventoryElement.textContent = 'Inventory: Empty';
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawHomeCave();
            drawPalmTrees();
            drawBerryBushes();
            drawFoods();
            drawCoconuts();
            drawBerries();
            drawCavePerson();
        }

        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        const keys = {};
        window.addEventListener('keydown', e => keys[e.code] = true);
        window.addEventListener('keyup', e => keys[e.code] = false);

        const leftBtn = document.getElementById('leftBtn');
        const jumpBtn = document.getElementById('jumpBtn');
        const rightBtn = document.getElementById('rightBtn');

        // Make sure to include the touch control event listeners at the end:
        const leftBtn = document.getElementById('leftBtn');
        const jumpBtn = document.getElementById('jumpBtn');
        const rightBtn = document.getElementById('rightBtn');

        leftBtn.addEventListener('touchstart', () => keys.ArrowLeft = true);
        leftBtn.addEventListener('touchend', () => keys.ArrowLeft = false);
        rightBtn.addEventListener('touchstart', () => keys.ArrowRight = true);
        rightBtn.addEventListener('touchend', () => keys.ArrowRight = false);
        jumpBtn.addEventListener('touchstart', () => keys.ArrowUp = true);
        jumpBtn.addEventListener('touchend', () => keys.ArrowUp = false);

        // Prevent default touch behavior
        document.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });

        gameLoop();
    });
</script>
